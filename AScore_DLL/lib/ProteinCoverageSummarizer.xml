<?xml version="1.0"?>
<doc>
<assembly>
<name>
ProteinCoverageSummarizer
</name>
</assembly>
<members>
<member name="T:ProteinCoverageSummarizer.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:ProteinCoverageSummarizer.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:ProteinCoverageSummarizer.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:ProteinCoverageSummarizer.clsLeaderSequenceCache">
 <summary>
 This class tracks the first n letters of each peptide sent to it, while also
 tracking the peptides and the location of those peptides in the leader sequence hash table
 </summary>
</member>
<member name="F:ProteinCoverageSummarizer.clsLeaderSequenceCache.udtPeptideSequenceInfoType.ProteinName">
 <summary>
 Protein name (optional)
 </summary>
</member>
<member name="F:ProteinCoverageSummarizer.clsLeaderSequenceCache.udtPeptideSequenceInfoType.PeptideSequence">
 <summary>
 Peptide amino acids (stored as uppercase letters)
 </summary>
</member>
<member name="F:ProteinCoverageSummarizer.clsLeaderSequenceCache.udtPeptideSequenceInfoType.Prefix">
 <summary>
 Prefix residue
 </summary>
</member>
<member name="F:ProteinCoverageSummarizer.clsLeaderSequenceCache.udtPeptideSequenceInfoType.Suffix">
 <summary>
 Suffix residue
 </summary>
</member>
<member name="F:ProteinCoverageSummarizer.clsLeaderSequenceCache.udtPeptideSequenceInfoType.PeptideSequenceLtoI">
 <summary>
 Peptide sequence where leucines have been changed to isoleucine
 </summary>
 <remarks>Only used if mIgnoreILDifferences is True</remarks>
</member>
<member name="F:ProteinCoverageSummarizer.clsLeaderSequenceCache.udtPeptideSequenceInfoType.PrefixLtoI">
 <summary>
 Prefix residue; if leucine, changed to isoleucine
 </summary>
 <remarks>Only used if mIgnoreILDifferences is True</remarks>
</member>
<member name="F:ProteinCoverageSummarizer.clsLeaderSequenceCache.udtPeptideSequenceInfoType.SuffixLtoI">
 <summary>
 Suffix residue; if leucine, changed to isoleucine
 </summary>
 <remarks>Only used if mIgnoreILDifferences is True</remarks>
</member>
<member name="M:ProteinCoverageSummarizer.clsLeaderSequenceCache.udtPeptideSequenceInfoType.ToString">
 <summary>
 Show the peptide sequence, including prefix and suffix
 </summary>
 <returns></returns>
</member>
<member name="F:ProteinCoverageSummarizer.clsLeaderSequenceCache.mCachedPeptideToHashIndexPointer">
 <summary>
 Parallel to mCachedPeptideSeqInfo
 </summary>
</member>
<member name="E:ProteinCoverageSummarizer.clsLeaderSequenceCache.ProgressChanged">
 <summary>
 Progress changed event
 </summary>
 <param name="taskDescription"></param>
 <param name="percentComplete">Value between 0 and 100, but can contain decimal percentage values</param>
</member>
<member name="F:ProteinCoverageSummarizer.clsLeaderSequenceCache.mProgressPercentComplete">
 <summary>
 Percent complete
 </summary>
 <remarks>
 Value between 0 and 100, but can contain decimal percentage values
 </remarks>
</member>
<member name="P:ProteinCoverageSummarizer.clsLeaderSequenceCache.ProgressPercentComplete">
 <summary>
 Percent complete
 </summary>
 <remarks>
 Value between 0 and 100, but can contain decimal percentage values
 </remarks>
</member>
<member name="M:ProteinCoverageSummarizer.clsLeaderSequenceCache.CachePeptide(System.String,System.String,System.Char,System.Char)">
 <summary>
 Caches the peptide and updates mLeaderSequences
 </summary>
 <param name="peptideSequence">Peptide sequence</param>
 <param name="proteinName">Protein name</param>
 <param name="prefixResidue">Prefix residue</param>
 <param name="suffixResidue">Suffix residue</param>
 <returns></returns>
</member>
<member name="T:ProteinCoverageSummarizer.clsProteinCoverageSummarizer">
 <summary>
 This class will read in a protein FASTA file or delimited protein info file along with
 an accompanying file with peptide sequences and compute the percent coverage of each of the proteins
 </summary>
</member>
<member name="F:ProteinCoverageSummarizer.clsProteinCoverageSummarizer.mResultsFilePath">
 <summary>
 This is populated by function ProcessFile()
 </summary>
</member>
<member name="F:ProteinCoverageSummarizer.clsProteinCoverageSummarizer.mPercentCompleteStartLevels">
 <summary>
 Array that lists the percent complete value to report at the start
 of each of the various processing steps performed in this procedure
 </summary>
 <remarks>The percent complete values range from 0 to 100</remarks>
</member>
<member name="E:ProteinCoverageSummarizer.clsProteinCoverageSummarizer.ProgressChanged">
 <summary>
 Progress changed event
 </summary>
 <param name="taskDescription"></param>
 <param name="percentComplete">Value between 0 and 100, but can contain decimal percentage values</param>
</member>
<member name="F:ProteinCoverageSummarizer.clsProteinCoverageSummarizer.mProgressPercentComplete">
 <summary>
 Percent complete
 </summary>
 <remarks>
 Value between 0 and 100, but can contain decimal percentage values
 </remarks>
</member>
<member name="P:ProteinCoverageSummarizer.clsProteinCoverageSummarizer.KeepDB">
 <summary>
 When this is True, the SQLite Database will not be deleted after processing finishes
 </summary>
</member>
<member name="P:ProteinCoverageSummarizer.clsProteinCoverageSummarizer.ProgressPercentComplete">
 <summary>
 Percent complete
 </summary>
 <returns></returns>
 <remarks>Value between 0 and 100, but can contain decimal percentage values</remarks>
</member>
<member name="M:ProteinCoverageSummarizer.clsProteinCoverageSummarizer.ConstructOutputFilePath(System.String,System.String,System.String,System.String)">
 <summary>
 Construct the output file path
 The output file is based on outputFileBaseName if defined, otherwise is based on inputFilePath with the suffix removed
 In either case, suffixToAppend is appended
 The Output directory is based on outputDirectoryPath if defined, otherwise it is the directory where inputFilePath resides
 </summary>
 <param name="inputFilePath"></param>
 <param name="suffixToAppend"></param>
 <param name="outputDirectoryPath"></param>
 <param name="outputFileBaseName"></param>
 <returns></returns>
</member>
<member name="M:ProteinCoverageSummarizer.clsProteinCoverageSummarizer.FindSequenceMatchForPeptideList(System.Collections.Generic.IDictionary{System.String,System.Int32},System.String)">
 <summary>
 Searches for proteins that contain the peptides in peptideList
 If proteinNameForPeptide is blank or mSearchAllProteinsForPeptideSequence=True then searches all proteins
 Otherwise, only searches protein proteinNameForPeptide
 </summary>
 <param name="peptideList">Dictionary containing the peptides to search; peptides must be in the format Prefix.Peptide.Suffix where Prefix and Suffix are single characters; peptides are assumed to only contain letters (no symbols)</param>
 <param name="proteinNameForPeptides">The protein to search; only used if mSearchAllProteinsForPeptideSequence=False</param>
 <remarks></remarks>
</member>
<member name="M:ProteinCoverageSummarizer.clsProteinCoverageSummarizer.GetOutputDirectoryPath(System.String,System.String)">
 <summary>
 Determine the output directory path
 Uses outputDirectoryPath if defined
 Otherwise uses the directory where outputFilePath resides
 </summary>
 <param name="outputDirectoryPath"></param>
 <param name="outputFilePath"></param>
 <returns></returns>
 <remarks>If an error, or unable to determine a directory, returns the directory with the application files</remarks>
</member>
<member name="M:ProteinCoverageSummarizer.clsProteinCoverageSummarizer.IncrementCountByKey(System.Collections.Generic.IDictionary{System.String,System.Int32},System.String)">
 <summary>
 Increment the observation count for the given key in the given dictionary
 If the key is not defined, add it
 </summary>
 <param name="dictionaryToUpdate"></param>
 <param name="keyName"></param>
 <returns>True if the protein is new and was added tomProteinPeptideStats </returns>
</member>
<member name="M:ProteinCoverageSummarizer.clsProteinCoverageSummarizer.ReadProteinInfoChunk(System.Int32,System.Boolean[],System.Boolean)">
 <summary>
 Read the next chunk of proteins from the database (SequenceID, ProteinName, ProteinSequence)
 </summary>
 <returns>The number of records read</returns>
 <remarks></remarks>
</member>
<member name="M:ProteinCoverageSummarizer.clsProteinCoverageSummarizer.ValidateColumnCountInInputFile(System.String,ProteinCoverageSummarizer.clsProteinCoverageSummarizer.ePeptideFileColumnOrderingCode@,System.Boolean,System.Char)">
 <summary>
 Read the first two lines to check whether the data file actually has only one column when the user has
 specified mPeptideFileColumnOrdering = ePeptideFileColumnOrderingCode.ProteinName_PeptideSequence
 If mPeptideFileColumnOrdering = ePeptideFileColumnOrderingCode.SequenceOnly, the file isn't even opened
 </summary>
 <param name="peptideInputFilePath"></param>
 <param name="ePeptideFileColumnOrdering">Input / Output parameter</param>
 <param name="skipFirstLine"></param>
 <param name="columnDelimiter"></param>
 <returns>True if no problems; False if the user chooses to abort</returns>
</member>
<member name="T:ProteinCoverageSummarizer.clsProteinFileDataCache">
 <summary>
 This class will read a protein FASTA file or delimited protein info file and
 store the proteins in memory
 </summary>
</member>
<member name="F:ProteinCoverageSummarizer.clsProteinFileDataCache.udtProteinInfoType.UniqueSequenceID">
 <summary>
 Unique sequence ID
 </summary>
 <remarks>
 Index number applied to the proteins stored in the SQLite DB; the first protein has UniqueSequenceID = 0
 </remarks>
</member>
<member name="F:ProteinCoverageSummarizer.clsProteinFileDataCache.udtProteinInfoType.PercentCoverage">
 <summary>
 Percent coverage
 </summary>
 <remarks>Value between 0 and 1</remarks>
</member>
<member name="P:ProteinCoverageSummarizer.clsProteinFileDataCache.AssumeDelimitedFile">
 <summary>
 When True, assume the input file is a tab-delimited text file
 </summary>
 <returns></returns>
 <remarks>Ignored if AssumeFastaFile is True</remarks>
</member>
<member name="P:ProteinCoverageSummarizer.clsProteinFileDataCache.AssumeFastaFile">
 <summary>
 When True, assume the input file is a FASTA text file
 </summary>
 <returns></returns>
</member>
<member name="P:ProteinCoverageSummarizer.clsProteinFileDataCache.KeepDB">
 <summary>
 When this is True, the SQLite Database will not be deleted after processing finishes
 </summary>
</member>
<member name="M:ProteinCoverageSummarizer.clsProteinFileDataCache.DeleteSQLiteDBFile(System.String,System.Boolean)">
 <summary>
 Delete the SQLite database file
 </summary>
 <param name="callingMethod">Calling method name</param>
 <param name="forceDelete">Force deletion (ignore KeepDB)</param>
</member>
<member name="M:ProteinCoverageSummarizer.clsProteinFileDataCache.IsFastaFile(System.String)">
 <summary>
 Examines the file's extension and true if it ends in .fasta or .fsa or .faa
 </summary>
 <param name="filePath"></param>
 <returns></returns>
</member>
</members>
</doc>
